name: CI/CD Pipeline

on:
  # This workflow triggers on two separate events
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # ----------------------------------------------------------------
  # CONTINUOUS INTEGRATION - These jobs run on every pull request
  # ----------------------------------------------------------------
  tests:
    name: Tests
    # This 'if' condition ensures the job only runs on pull request events
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code so the workflow can access it
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up the Go programming language environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      # Step 3: Run the unit tests and calculate code coverage
      - name: Run tests
        run: go test -cover ./...

  style:
    name: Style
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      # Step 3: Check if all Go files are correctly formatted
      - name: Check format
        run: test -z $(go fmt ./...)

  security:
    name: Security
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      # Step 3: Install the Gosec security scanner tool
      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      # Step 4: Run Gosec to scan the code for security vulnerabilities
      - name: Run Gosec Security Scanner
        run: gosec ./...

  # ------------------------------------------------------------------
  # CONTINUOUS DEPLOYMENT - This job runs only when code is pushed to main
  # ------------------------------------------------------------------
  deploy:
    name: Deploy
    # This 'if' condition ensures the job only runs on pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up the Go programming language environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      # Step 3: Install the goose migration tool
      - name: Install goose
        run: go install github.com/pressly/goose/v3/cmd/goose@latest

      # Step 4: Build the Go application binary for a Linux OS
      - name: Build Go application for Linux
        run: GOOS=linux go build -o notely .

      # Step 5: Log in to the Docker Hub container registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Build the Docker image and push it to Docker Hub
      - name: Build and push the Docker image
        run: |
          docker build -t veronicalobos87/notely:latest .
          docker push veronicalobos87/notely:latest
      
      # Step 7: Run database migrations
      - name: Run database migrations
        env:
          DATABASE_URL: '${{ secrets.DATABASE_URL }}'
        run: goose up

      # Step 8: Authenticate to Google Cloud using a Service Account Key
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Step 9: Deploy the container image from Docker Hub to Google Cloud Run
      - name: Deploy to Cloud Run
        run: >-
          gcloud run deploy notely 
          --image docker.io/veronicalobos87/notely:latest 
          --region us-central1 
          --allow-unauthenticated 
          --project ${{ secrets.GCP_PROJECT_ID }} 
          --max-instances=4
